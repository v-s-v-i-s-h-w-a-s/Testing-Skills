name: Optimized CI/CD Pipeline

on:
  push:
    branches: [ main, feature-*, release-* ]
  pull_request:
    branches: [ main, release-* ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

# Limit concurrent deployments
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Limit permissions
permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'
      
      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linting
        run: npm run lint
        continue-on-error: false
      
      - name: Run tests
        if: ${{ !contains(github.event.head_commit.message, '[skip tests]') }}
        run: npm test
      
      - name: Upload test coverage
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage
          path: coverage
          retention-days: 7

  build:
    name: Build Application
    needs: lint-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --production
      
      - name: Build application
        run: npm run build
      
      - name: Package application
        run: |
          tar -czf app-bundle.tar.gz dist node_modules package.json
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: app-bundle
          path: app-bundle.tar.gz
          retention-days: 1

  deploy-staging:
    name: Deploy to Staging
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging'
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: https://staging-example.com
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: app-bundle
      
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # In a real scenario, you would use your actual deployment commands here
          echo "Deployed successfully to staging!"

  deploy-production:
    name: Deploy to Production
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    needs: [build, deploy-staging]
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://production-example.com
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: app-bundle
      
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # In a real scenario, you would use your actual deployment commands here
          echo "Deployed successfully to production!"
      
      - name: Create deployment notification
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number || (context.payload.pull_request ? context.payload.pull_request.number : null),
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸš€ Deployment to production was successful!'
            })
